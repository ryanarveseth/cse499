{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanarveseth\\\\Desktop\\\\Projects\\\\senior-project\\\\ui\\\\src\\\\components\\\\ImagePredictor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ImageButton from \"./ImageButton\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst mobilenet = require('@tensorflow-models/mobilenet');\n\nconst EmptyImage = styled.div`\n  background-color: lightGrey;\n  height: 320px; \n  width: 320px;\n  margin: 0 auto;\n`;\n_c = EmptyImage;\nconst ImageContainer = styled.div`\n  border-radius: 8px;\n`;\n_c2 = ImageContainer;\nconst Prediction = styled.div`\n  font-size: 20px;\n  color: white;\n  margin-bottom: 32px;\n`;\n_c3 = Prediction;\nconst Overlay = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background: rgba(0,0,0,0.5);\n  position: fixed;\n  z-index: 2;\n  top: 0;\n  left: 0;\n`;\n_c4 = Overlay;\nconst Spinner = styled.div`\n  border-radius: 50%;\n  width: 2.5em;\n  height: 2.5em;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation: load7 1.8s infinite ease-in-out;\n  animation: load7 1.8s infinite ease-in-out;\n  color: #20bf6b;\n  font-size: 10px;\n  margin: 80px auto;\n  position: relative;\n  text-indent: -9999em;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-animation-delay: -0.16s;\n  animation-delay: -0.16s;\n  \n  z-index: 3;\n\n  &:before {\n    border-radius: 50%;\n    width: 2.5em;\n    height: 2.5em;\n    -webkit-animation-fill-mode: both;\n    animation-fill-mode: both;\n    -webkit-animation: load7 1.8s infinite ease-in-out;\n    animation: load7 1.8s infinite ease-in-out;\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -3.5em;\n    -webkit-animation-delay: -0.32s;\n    animation-delay: -0.32s;\n  }\n  \n  &:after {\n    border-radius: 50%;\n    width: 2.5em;\n    height: 2.5em;\n    -webkit-animation-fill-mode: both;\n    animation-fill-mode: both;\n    -webkit-animation: load7 1.8s infinite ease-in-out;\n    animation: load7 1.8s infinite ease-in-out;\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 3.5em;\n  }\n`;\n_c5 = Spinner;\n\nconst ImagePredictor = () => {\n  _s();\n\n  const [model, setModel] = useState();\n  const [img, setImg] = useState();\n  const [prediction, setPrediction] = useState();\n  const [showPrediction, setShowPrediction] = useState(false);\n  const [accuracyRating, setAccuracyRating] = useState(\"\");\n  const [guessedCorrect, setGuessedCorrect] = useState(1);\n  useEffect(() => {\n    const getAccuracyRating = async () => {\n      const rating = await fetch(\"api/get-accuracy\");\n      console.log(\"rating\", rating);\n      setAccuracyRating(rating);\n    };\n\n    getAccuracyRating();\n  }, []);\n\n  const saveAccuracy = () => {\n    console.log(\"guessedCorrect\", guessedCorrect);\n    const saveRating = fetch(\"api/add-to-accuracy\", {\n      method: \"post\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        accurate: guessedCorrect\n      })\n    }).then(rating => {\n      console.log(\"rating after fetch\", rating);\n      setAccuracyRating(rating.percentage);\n    });\n  };\n\n  const readImageData = file => {\n    if (file) {\n      return new Promise((resolve, reject) => {\n        const fileReader = new FileReader();\n\n        fileReader.onload = () => resolve(fileReader.result);\n\n        fileReader.onerror = () => reject(fileReader.error);\n\n        fileReader.readAsDataURL(file);\n      });\n    } else {\n      return undefined;\n    }\n  };\n\n  const selectImage = async e => {\n    const file = e.target.files[0];\n    setImg(await readImageData(file));\n  };\n\n  useEffect(() => {\n    const getMobileNet = async () => {\n      const modelData = await mobilenet.load();\n      setModel(modelData);\n    };\n\n    if (model === undefined) {\n      getMobileNet();\n    }\n  }, [model]);\n  useEffect(() => {\n    const getPrediction = async () => {\n      if (model !== undefined && img !== undefined) {\n        const inputImage = document.createElement('img');\n        inputImage.src = img;\n\n        inputImage.onload = async () => {\n          const predictionsData = await model.classify(inputImage, 1);\n          let {\n            className,\n            probability\n          } = predictionsData && predictionsData.length > 0 && predictionsData[0];\n\n          if (className.includes(\"coyote\")) {\n            className = \"Coyote\";\n          } else if (className.includes(\"cougar\") || className.includes(\"mountain\") || className.includes(\"catamount\") || className.includes(\"puma\") || className.includes(\"panther\")) {\n            className = \"Cougar\";\n          } else if (className.includes(\"fox\")) {\n            className = \"Fox\";\n          } else if (className.includes(\"cat\")) {\n            className = \"Cat\";\n          } else if (className.includes(\"dog\")) {\n            className = \"Dog\";\n          } else {\n            className = `Unknown image. Is it a ${className.split(\",\").map(guess => guess.trim())[0]}?`;\n          }\n\n          setPrediction({\n            probability: probability,\n            className: className\n          });\n        };\n      }\n    };\n\n    if (img && model) {\n      getPrediction();\n    }\n  }, [model, img]);\n  useEffect(() => {\n    if (!prediction) {\n      setShowPrediction(false);\n    } else {\n      setTimeout(() => {\n        setShowPrediction(true);\n      }, 2000);\n    }\n  }, [prediction]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [accuracyRating && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Lifetime accuracy rating: \", accuracyRating, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"What's in the picture?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"(Coyote, Cougar, Fox, Dog, Cat, or something else?)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Image recognition software build on tensorflow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), prediction && showPrediction ? /*#__PURE__*/_jsxDEV(Prediction, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: prediction.className[0].toUpperCase() + prediction.className.slice(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: `(${(prediction.probability * 100).toFixed(2)}% sure)`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"inline-block\",\n        height: \"52px\",\n        marginBottom: \"32px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(ImageContainer, {\n      children: img ? /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"The item to be predicted\",\n        src: img,\n        height: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(EmptyImage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageButton, {\n      selectImage: selectImage,\n      setShowPrediction: setShowPrediction,\n      setPrediction: setPrediction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: prediction && showPrediction && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Was my guess correct?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onChange: e => setGuessedCorrect(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: 1,\n            name: \"correct\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), \" Yes\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: 0,\n            name: \"correct\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), \" No\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveAccuracy,\n          children: \"save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: prediction && !showPrediction && /*#__PURE__*/_jsxDEV(Overlay, {\n        children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ImagePredictor, \"3sTz+VNhpWLYk8dmWO5LV8jDdS4=\");\n\n_c6 = ImagePredictor;\nexport default ImagePredictor;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"EmptyImage\");\n$RefreshReg$(_c2, \"ImageContainer\");\n$RefreshReg$(_c3, \"Prediction\");\n$RefreshReg$(_c4, \"Overlay\");\n$RefreshReg$(_c5, \"Spinner\");\n$RefreshReg$(_c6, \"ImagePredictor\");","map":{"version":3,"sources":["C:/Users/ryanarveseth/Desktop/Projects/senior-project/ui/src/components/ImagePredictor.js"],"names":["React","useEffect","useState","ImageButton","styled","mobilenet","require","EmptyImage","div","ImageContainer","Prediction","Overlay","Spinner","ImagePredictor","model","setModel","img","setImg","prediction","setPrediction","showPrediction","setShowPrediction","accuracyRating","setAccuracyRating","guessedCorrect","setGuessedCorrect","getAccuracyRating","rating","fetch","console","log","saveAccuracy","saveRating","method","headers","body","JSON","stringify","accurate","then","percentage","readImageData","file","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","error","readAsDataURL","undefined","selectImage","e","target","files","getMobileNet","modelData","load","getPrediction","inputImage","document","createElement","src","predictionsData","classify","className","probability","length","includes","split","map","guess","trim","setTimeout","toUpperCase","slice","toFixed","display","height","marginBottom","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;;AAEA,MAAMC,SAAS,GAAGC,OAAO,CAAC,8BAAD,CAAzB;;AAGA,MAAMC,UAAU,GAAGH,MAAM,CAACI,GAAI;AAC9B;AACA;AACA;AACA;AACA,CALA;KAAMD,U;AAON,MAAME,cAAc,GAAGL,MAAM,CAACI,GAAI;AAClC;AACA,CAFA;MAAMC,c;AAIN,MAAMC,UAAU,GAAGN,MAAM,CAACI,GAAI;AAC9B;AACA;AACA;AACA,CAJA;MAAME,U;AAMN,MAAMC,OAAO,GAAGP,MAAM,CAACI,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;MAAMG,O;AAUN,MAAMC,OAAO,GAAGR,MAAM,CAACI,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlDA;MAAMI,O;;AAqDN,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,EAAlC;AACA,QAAM,CAACc,GAAD,EAAMC,MAAN,IAAgBf,QAAQ,EAA9B;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,EAA5C;AACA,QAAM,CAACkB,cAAD,EAAiBC,iBAAjB,IAAsCnB,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACoB,cAAD,EAAiBC,iBAAjB,IAAsCrB,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACsB,cAAD,EAAiBC,iBAAjB,IAAsCvB,QAAQ,CAAC,CAAD,CAApD;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,iBAAiB,GAAG,YAAY;AACpC,YAAMC,MAAM,GAAG,MAAMC,KAAK,CAAC,kBAAD,CAA1B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,MAAtB;AACAJ,MAAAA,iBAAiB,CAACI,MAAD,CAAjB;AACD,KAJD;;AAMAD,IAAAA,iBAAiB;AAClB,GARQ,EAQN,EARM,CAAT;;AAUA,QAAMK,YAAY,GAAG,MAAM;AAEzBF,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BN,cAA9B;AAEA,UAAMQ,UAAU,GAAGJ,KAAK,CAAC,qBAAD,EACtB;AACEK,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFX;AAKEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,QAAQ,EAAEd;AAAX,OAAf;AALR,KADsB,CAAL,CAQhBe,IARgB,CAQXZ,MAAM,IAAI;AAEhBE,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCH,MAAlC;AAEAJ,MAAAA,iBAAiB,CAACI,MAAM,CAACa,UAAR,CAAjB;AACD,KAbkB,CAAnB;AAcD,GAlBD;;AAoBA,QAAMC,aAAa,GAAGC,IAAI,IAAI;AAC5B,QAAIA,IAAJ,EAAU;AACR,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,cAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;AACAD,QAAAA,UAAU,CAACE,MAAX,GAAoB,MAAMJ,OAAO,CAACE,UAAU,CAACG,MAAZ,CAAjC;;AACAH,QAAAA,UAAU,CAACI,OAAX,GAAqB,MAAML,MAAM,CAACC,UAAU,CAACK,KAAZ,CAAjC;;AACAL,QAAAA,UAAU,CAACM,aAAX,CAAyBV,IAAzB;AACD,OALM,CAAP;AAMD,KAPD,MAOO;AACL,aAAOW,SAAP;AACD;AACF,GAXD;;AAaA,QAAMC,WAAW,GAAG,MAAOC,CAAP,IAAa;AAC/B,UAAMb,IAAI,GAAGa,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;AAEAxC,IAAAA,MAAM,CAAC,MAAMwB,aAAa,CAACC,IAAD,CAApB,CAAN;AACD,GAJD;;AAMAzC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyD,YAAY,GAAG,YAAY;AAC/B,YAAMC,SAAS,GAAG,MAAMtD,SAAS,CAACuD,IAAV,EAAxB;AACA7C,MAAAA,QAAQ,CAAC4C,SAAD,CAAR;AACD,KAHD;;AAKA,QAAI7C,KAAK,KAAKuC,SAAd,EAAyB;AACvBK,MAAAA,YAAY;AACb;AACF,GATQ,EASN,CAAC5C,KAAD,CATM,CAAT;AAWAb,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAM4D,aAAa,GAAG,YAAY;AAChC,UAAI/C,KAAK,KAAKuC,SAAV,IAAuBrC,GAAG,KAAKqC,SAAnC,EAA8C;AAC5C,cAAMS,UAAU,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAnB;AACAF,QAAAA,UAAU,CAACG,GAAX,GAAiBjD,GAAjB;;AAEA8C,QAAAA,UAAU,CAACd,MAAX,GAAoB,YAAY;AAC9B,gBAAMkB,eAAe,GAAG,MAAMpD,KAAK,CAACqD,QAAN,CAAeL,UAAf,EAA2B,CAA3B,CAA9B;AAEA,cAAI;AAACM,YAAAA,SAAD;AAAYC,YAAAA;AAAZ,cAA2BH,eAAe,IAAIA,eAAe,CAACI,MAAhB,GAAyB,CAA5C,IAAiDJ,eAAe,CAAC,CAAD,CAA/F;;AAEA,cAAIE,SAAS,CAACG,QAAV,CAAmB,QAAnB,CAAJ,EAAkC;AAChCH,YAAAA,SAAS,GAAG,QAAZ;AACD,WAFD,MAEO,IAAIA,SAAS,CAACG,QAAV,CAAmB,QAAnB,KACTH,SAAS,CAACG,QAAV,CAAmB,UAAnB,CADS,IAETH,SAAS,CAACG,QAAV,CAAmB,WAAnB,CAFS,IAGTH,SAAS,CAACG,QAAV,CAAmB,MAAnB,CAHS,IAITH,SAAS,CAACG,QAAV,CAAmB,SAAnB,CAJK,EAI0B;AAC/BH,YAAAA,SAAS,GAAG,QAAZ;AACD,WANM,MAMA,IAAIA,SAAS,CAACG,QAAV,CAAmB,KAAnB,CAAJ,EAA+B;AACpCH,YAAAA,SAAS,GAAG,KAAZ;AACD,WAFM,MAEA,IAAIA,SAAS,CAACG,QAAV,CAAmB,KAAnB,CAAJ,EAA+B;AACpCH,YAAAA,SAAS,GAAG,KAAZ;AACD,WAFM,MAEA,IAAIA,SAAS,CAACG,QAAV,CAAmB,KAAnB,CAAJ,EAA+B;AACpCH,YAAAA,SAAS,GAAG,KAAZ;AACD,WAFM,MAEA;AACLA,YAAAA,SAAS,GAAI,0BAAyBA,SAAS,CAACI,KAAV,CAAgB,GAAhB,EAAqBC,GAArB,CAAyBC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAlC,EAAgD,CAAhD,CAAmD,GAAzF;AACD;;AAEDxD,UAAAA,aAAa,CAAC;AAACkD,YAAAA,WAAW,EAAEA,WAAd;AAA2BD,YAAAA,SAAS,EAAEA;AAAtC,WAAD,CAAb;AACD,SAxBD;AAyBD;AACF,KA/BD;;AAiCA,QAAIpD,GAAG,IAAIF,KAAX,EAAkB;AAChB+C,MAAAA,aAAa;AACd;AACF,GAtCQ,EAsCN,CAAC/C,KAAD,EAAQE,GAAR,CAtCM,CAAT;AAwCAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACiB,UAAL,EAAiB;AACfG,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,KAFD,MAEO;AACLuD,MAAAA,UAAU,CAAC,MAAM;AACfvD,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,OAFS,EAEP,IAFO,CAAV;AAGD;AACF,GARQ,EAQN,CAACH,UAAD,CARM,CAAT;AAUA,sBACE;AAAA,eACGI,cAAc,iBAAI;AAAA,+CAA+BA,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,YADrB,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,EAQIJ,UAAU,IACVE,cADA,gBAEE,QAAC,UAAD;AAAA,8BACE;AAAA,kBACGF,UAAU,CAACkD,SAAX,CAAqB,CAArB,EAAwBS,WAAxB,KAAwC3D,UAAU,CAACkD,SAAX,CAAqBU,KAArB,CAA2B,CAA3B;AAD3C;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAA,kBACI,IAAG,CAAC5D,UAAU,CAACmD,WAAX,GAAyB,GAA1B,EAA+BU,OAA/B,CAAuC,CAAvC,CAA0C;AADjD;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,gBAUE;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,OAAO,EAAE,cAAV;AAA0BC,QAAAA,MAAM,EAAE,MAAlC;AAA0CC,QAAAA,YAAY,EAAE;AAAxD;AAAZ;AAAA;AAAA;AAAA;AAAA,YAlBN,eAoBE,QAAC,cAAD;AAAA,gBACGlE,GAAG,gBACF;AAAK,QAAA,GAAG,EAAC,0BAAT;AAAoC,QAAA,GAAG,EAAEA,GAAzC;AAA8C,QAAA,MAAM,EAAE;AAAtD;AAAA;AAAA;AAAA;AAAA,cADE,gBAEF,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,YApBF,eA0BE,QAAC,WAAD;AAAa,MAAA,WAAW,EAAEsC,WAA1B;AACa,MAAA,iBAAiB,EAAEjC,iBADhC;AAEa,MAAA,aAAa,EAAEF;AAF5B;AAAA;AAAA;AAAA;AAAA,YA1BF,eA6BE;AAAA,gBAEID,UAAU,IAAIE,cAAd,iBACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEF;AAAK,UAAA,QAAQ,EAAGmC,CAAD,IAAO9B,iBAAiB,CAAC8B,CAAC,CAACC,MAAF,CAAS2B,KAAV,CAAvC;AAAA,kCACE;AAAO,YAAA,IAAI,EAAC,OAAZ;AAAoB,YAAA,KAAK,EAAE,CAA3B;AAA8B,YAAA,IAAI,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,kBADF,uBAEE;AAAO,YAAA,IAAI,EAAC,OAAZ;AAAoB,YAAA,KAAK,EAAE,CAA3B;AAA8B,YAAA,IAAI,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFE,eAME;AAAQ,UAAA,OAAO,EAAEpD,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAHN;AAAA;AAAA;AAAA;AAAA,YA7BF,eAyCE;AAAA,gBAEIb,UAAU,IACV,CAACE,cADD,iBAEA,QAAC,OAAD;AAAA,+BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,YAzCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqDD,CA5KD;;GAAMP,c;;MAAAA,c;AA8KN,eAAeA,cAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport ImageButton from \"./ImageButton\";\r\nimport styled from \"styled-components\";\r\n\r\nconst mobilenet = require('@tensorflow-models/mobilenet');\r\n\r\n\r\nconst EmptyImage = styled.div`\r\n  background-color: lightGrey;\r\n  height: 320px; \r\n  width: 320px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst Prediction = styled.div`\r\n  font-size: 20px;\r\n  color: white;\r\n  margin-bottom: 32px;\r\n`;\r\n\r\nconst Overlay = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  background: rgba(0,0,0,0.5);\r\n  position: fixed;\r\n  z-index: 2;\r\n  top: 0;\r\n  left: 0;\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border-radius: 50%;\r\n  width: 2.5em;\r\n  height: 2.5em;\r\n  -webkit-animation-fill-mode: both;\r\n  animation-fill-mode: both;\r\n  -webkit-animation: load7 1.8s infinite ease-in-out;\r\n  animation: load7 1.8s infinite ease-in-out;\r\n  color: #20bf6b;\r\n  font-size: 10px;\r\n  margin: 80px auto;\r\n  position: relative;\r\n  text-indent: -9999em;\r\n  -webkit-transform: translateZ(0);\r\n  -ms-transform: translateZ(0);\r\n  transform: translateZ(0);\r\n  -webkit-animation-delay: -0.16s;\r\n  animation-delay: -0.16s;\r\n  \r\n  z-index: 3;\r\n\r\n  &:before {\r\n    border-radius: 50%;\r\n    width: 2.5em;\r\n    height: 2.5em;\r\n    -webkit-animation-fill-mode: both;\r\n    animation-fill-mode: both;\r\n    -webkit-animation: load7 1.8s infinite ease-in-out;\r\n    animation: load7 1.8s infinite ease-in-out;\r\n    content: '';\r\n    position: absolute;\r\n    top: 0;\r\n    left: -3.5em;\r\n    -webkit-animation-delay: -0.32s;\r\n    animation-delay: -0.32s;\r\n  }\r\n  \r\n  &:after {\r\n    border-radius: 50%;\r\n    width: 2.5em;\r\n    height: 2.5em;\r\n    -webkit-animation-fill-mode: both;\r\n    animation-fill-mode: both;\r\n    -webkit-animation: load7 1.8s infinite ease-in-out;\r\n    animation: load7 1.8s infinite ease-in-out;\r\n    content: '';\r\n    position: absolute;\r\n    top: 0;\r\n    left: 3.5em;\r\n  }\r\n`;\r\n\r\n\r\nconst ImagePredictor = () => {\r\n  const [model, setModel] = useState();\r\n  const [img, setImg] = useState();\r\n  const [prediction, setPrediction] = useState();\r\n  const [showPrediction, setShowPrediction] = useState(false);\r\n  const [accuracyRating, setAccuracyRating] = useState(\"\");\r\n  const [guessedCorrect, setGuessedCorrect] = useState(1);\r\n\r\n\r\n  useEffect(() => {\r\n    const getAccuracyRating = async () => {\r\n      const rating = await fetch(\"api/get-accuracy\");\r\n      console.log(\"rating\", rating);\r\n      setAccuracyRating(rating);\r\n    }\r\n\r\n    getAccuracyRating();\r\n  }, []);\r\n\r\n  const saveAccuracy = () => {\r\n\r\n    console.log(\"guessedCorrect\", guessedCorrect);\r\n\r\n    const saveRating = fetch(\"api/add-to-accuracy\",\r\n      {\r\n        method: \"post\",\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({accurate: guessedCorrect})\r\n      })\r\n      .then(rating => {\r\n\r\n      console.log(\"rating after fetch\", rating);\r\n\r\n      setAccuracyRating(rating.percentage);\r\n    })\r\n  }\r\n\r\n  const readImageData = file => {\r\n    if (file) {\r\n      return new Promise((resolve, reject) => {\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = () => resolve(fileReader.result);\r\n        fileReader.onerror = () => reject(fileReader.error);\r\n        fileReader.readAsDataURL(file);\r\n      });\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  const selectImage = async (e) => {\r\n    const file = e.target.files[0];\r\n\r\n    setImg(await readImageData(file))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getMobileNet = async () => {\r\n      const modelData = await mobilenet.load();\r\n      setModel(modelData);\r\n    }\r\n\r\n    if (model === undefined) {\r\n      getMobileNet();\r\n    }\r\n  }, [model]);\r\n\r\n  useEffect(() => {\r\n\r\n    const getPrediction = async () => {\r\n      if (model !== undefined && img !== undefined) {\r\n        const inputImage = document.createElement('img');\r\n        inputImage.src = img;\r\n\r\n        inputImage.onload = async () => {\r\n          const predictionsData = await model.classify(inputImage, 1);\r\n\r\n          let {className, probability} = predictionsData && predictionsData.length > 0 && predictionsData[0];\r\n\r\n          if (className.includes(\"coyote\")) {\r\n            className = \"Coyote\";\r\n          } else if (className.includes(\"cougar\") ||\r\n            className.includes(\"mountain\") ||\r\n            className.includes(\"catamount\") ||\r\n            className.includes(\"puma\") ||\r\n            className.includes(\"panther\")) {\r\n            className = \"Cougar\";\r\n          } else if (className.includes(\"fox\")) {\r\n            className = \"Fox\";\r\n          } else if (className.includes(\"cat\")) {\r\n            className = \"Cat\";\r\n          } else if (className.includes(\"dog\")) {\r\n            className = \"Dog\";\r\n          } else {\r\n            className = `Unknown image. Is it a ${className.split(\",\").map(guess => guess.trim())[0]}?`\r\n          }\r\n\r\n          setPrediction({probability: probability, className: className});\r\n        }\r\n      }\r\n    }\r\n\r\n    if (img && model) {\r\n      getPrediction();\r\n    }\r\n  }, [model, img]);\r\n\r\n  useEffect(() => {\r\n    if (!prediction) {\r\n      setShowPrediction(false);\r\n    } else {\r\n      setTimeout(() => {\r\n        setShowPrediction(true);\r\n      }, 2000);\r\n    }\r\n  }, [prediction]);\r\n\r\n  return (\r\n    <div>\r\n      {accuracyRating && <h1>Lifetime accuracy rating: {accuracyRating}%</h1>}\r\n      <h1>What's in the picture?</h1>\r\n      <h2>\r\n        (Coyote, Cougar, Fox, Dog, Cat, or something else?)\r\n      </h2>\r\n      <h4>Image recognition software build on tensorflow</h4>\r\n      {\r\n        prediction &&\r\n        showPrediction ?\r\n          <Prediction>\r\n            <div>\r\n              {prediction.className[0].toUpperCase() + prediction.className.slice(1)}\r\n            </div>\r\n            <div>\r\n              {`(${(prediction.probability * 100).toFixed(2)}% sure)`}\r\n            </div>\r\n          </Prediction> :\r\n          <div style={{display: \"inline-block\", height: \"52px\", marginBottom: \"32px\"}}/>\r\n      }\r\n      <ImageContainer>\r\n        {img ?\r\n          <img alt=\"The item to be predicted\" src={img} height={300}/> :\r\n          <EmptyImage/>\r\n        }\r\n      </ImageContainer>\r\n      <ImageButton selectImage={selectImage}\r\n                   setShowPrediction={setShowPrediction}\r\n                   setPrediction={setPrediction}/>\r\n      <div>\r\n        {\r\n          prediction && showPrediction &&\r\n            <>\r\n              <h3>Was my guess correct?</h3>\r\n          <div onChange={(e) => setGuessedCorrect(e.target.value)}>\r\n            <input type=\"radio\" value={1} name=\"correct\"/> Yes\r\n            <input type=\"radio\" value={0} name=\"correct\"/> No\r\n          </div>\r\n              <button onClick={saveAccuracy}>save</button>\r\n            </>        }\r\n      </div>\r\n      <div>\r\n        {\r\n          prediction &&\r\n          !showPrediction &&\r\n          <Overlay>\r\n            <Spinner/>\r\n          </Overlay>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImagePredictor;"]},"metadata":{},"sourceType":"module"}