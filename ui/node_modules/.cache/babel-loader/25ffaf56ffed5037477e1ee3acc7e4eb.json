{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanarveseth\\\\Desktop\\\\Projects\\\\senior-project\\\\ui\\\\src\\\\components\\\\PredictionModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Prediction = styled.div`\n  font-size: 20px;\n  margin-bottom: 32px;\n`;\n_c = Prediction;\nconst EmptyImage = styled.div`\n  background-color: lightGrey;\n  height: 320px; \n  width: 320px;\n  margin: 0 auto;\n`;\n_c2 = EmptyImage;\nconst Radio = styled.div`\n\n`;\n_c3 = Radio;\nconst Button = styled.button`\n  padding: 12px 20px;\n  border-radius: 8px;\n  border: 0px;\n  cursor: pointer;\n`;\nconst SubmitButton = styled(Button)`\n  background-color: #20bf6b;\n  border: 2px solid #20bf6b;\n  transition: .5s ease;\n  \n  &:hover {\n    background-color: white;\n    transition: .5s ease;\n  }\n`;\n_c4 = SubmitButton;\nconst CloseButton = styled(Button)`\n  background-color: #bf206b;\n  border: 2px solid #bf206b;\n  transition: .5s ease;\n  \n  &:hover {\n    background-color: white;\n    transition: .5s ease;\n  }\n`;\n_c5 = CloseButton;\nconst Overlay = styled.div`\n  position: fixed;\n  width: 100%;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  background: rgba(0,0,0,0.5);\n`;\n_c6 = Overlay;\nconst Modal = styled.div`\n  width: fit-content;\n  height: fit-content;\n  position: fixed;\n  margin: 0 auto;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  color: black !important;\n  padding: 32px;\n  border-radius: 16px;\n  \n`;\n_c7 = Modal;\n\nconst PredictionModal = ({\n  show,\n  prediction,\n  image,\n  setPrediction,\n  setShowPrediction,\n  setAccuracyRating\n}) => {\n  _s();\n\n  const [guessedCorrect, setGuessedCorrect] = useState(1);\n\n  const closeModal = () => {\n    setShowPrediction(false);\n    setPrediction();\n  };\n\n  const saveAccuracy = () => {\n    fetch(\"api/add-to-accuracy\", {\n      method: \"post\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        accurate: guessedCorrect\n      })\n    }).then(res => {\n      res.json().then(rating => {\n        setAccuracyRating(rating.percentage);\n        setShowPrediction(false);\n        setPrediction();\n      });\n    });\n  };\n\n  return show ? /*#__PURE__*/_jsxDEV(Overlay, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: prediction ? /*#__PURE__*/_jsxDEV(Prediction, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: prediction.className[0].toUpperCase() + prediction.className.slice(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: `(${(prediction.probability * 100).toFixed(2)}% confidence level)`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\",\n            height: \"52px\",\n            marginBottom: \"32px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: image ? /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"The item to be predicted\",\n          src: image,\n          height: 300\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(EmptyImage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: prediction && show && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Was my guess correct?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Radio, {\n            onChange: e => setGuessedCorrect(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: 1,\n                name: \"correct\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 24\n              }, this), \" Yes\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                value: 0,\n                name: \"correct\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 24\n              }, this), \" No\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              float: \"right\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(CloseButton, {\n              onClick: closeModal,\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n              onClick: saveAccuracy,\n              children: \"Save and Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(PredictionModal, \"Mr87KMiHCwnfWm40f5fcHNFGhVk=\");\n\n_c8 = PredictionModal;\nexport default PredictionModal;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"Prediction\");\n$RefreshReg$(_c2, \"EmptyImage\");\n$RefreshReg$(_c3, \"Radio\");\n$RefreshReg$(_c4, \"SubmitButton\");\n$RefreshReg$(_c5, \"CloseButton\");\n$RefreshReg$(_c6, \"Overlay\");\n$RefreshReg$(_c7, \"Modal\");\n$RefreshReg$(_c8, \"PredictionModal\");","map":{"version":3,"sources":["C:/Users/ryanarveseth/Desktop/Projects/senior-project/ui/src/components/PredictionModal.js"],"names":["React","useState","styled","Prediction","div","EmptyImage","Radio","Button","button","SubmitButton","CloseButton","Overlay","Modal","PredictionModal","show","prediction","image","setPrediction","setShowPrediction","setAccuracyRating","guessedCorrect","setGuessedCorrect","closeModal","saveAccuracy","fetch","method","headers","body","JSON","stringify","accurate","then","res","json","rating","percentage","className","toUpperCase","slice","probability","toFixed","display","height","marginBottom","e","target","value","float"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Prediction = styled.div`\r\n  font-size: 20px;\r\n  margin-bottom: 32px;\r\n`;\r\n\r\nconst EmptyImage = styled.div`\r\n  background-color: lightGrey;\r\n  height: 320px; \r\n  width: 320px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Radio = styled.div`\r\n\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 12px 20px;\r\n  border-radius: 8px;\r\n  border: 0px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst SubmitButton = styled(Button)`\r\n  background-color: #20bf6b;\r\n  border: 2px solid #20bf6b;\r\n  transition: .5s ease;\r\n  \r\n  &:hover {\r\n    background-color: white;\r\n    transition: .5s ease;\r\n  }\r\n`;\r\n\r\nconst CloseButton = styled(Button)`\r\n  background-color: #bf206b;\r\n  border: 2px solid #bf206b;\r\n  transition: .5s ease;\r\n  \r\n  &:hover {\r\n    background-color: white;\r\n    transition: .5s ease;\r\n  }\r\n`;\r\n\r\nconst Overlay = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background: rgba(0,0,0,0.5);\r\n`;\r\n\r\nconst Modal = styled.div`\r\n  width: fit-content;\r\n  height: fit-content;\r\n  position: fixed;\r\n  margin: 0 auto;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background-color: white;\r\n  color: black !important;\r\n  padding: 32px;\r\n  border-radius: 16px;\r\n  \r\n`;\r\n\r\nconst PredictionModal = ({show, prediction, image, setPrediction, setShowPrediction, setAccuracyRating}) => {\r\n  const [guessedCorrect, setGuessedCorrect] = useState(1);\r\n\r\n  const closeModal = () => {\r\n    setShowPrediction(false);\r\n    setPrediction();\r\n  };\r\n\r\n  const saveAccuracy = () => {\r\n    fetch(\"api/add-to-accuracy\",\r\n      {\r\n        method: \"post\",\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({accurate: guessedCorrect})\r\n      })\r\n      .then(res => {\r\n        res.json().then(rating => {\r\n          setAccuracyRating(rating.percentage);\r\n          setShowPrediction(false);\r\n          setPrediction();\r\n        });\r\n      })\r\n  }\r\n\r\n  return show ?\r\n    <Overlay>\r\n      <Modal>\r\n        <div>\r\n          {\r\n            prediction ?\r\n              <Prediction>\r\n                <h2>\r\n                  {prediction.className[0].toUpperCase() + prediction.className.slice(1)}\r\n                </h2>\r\n                <h4>\r\n                  {`(${(prediction.probability * 100).toFixed(2)}% confidence level)`}\r\n                </h4>\r\n              </Prediction> :\r\n              <div style={{display: \"inline-block\", height: \"52px\", marginBottom: \"32px\"}}/>\r\n          }\r\n        </div>\r\n        <div>\r\n          {image ?\r\n            <img alt=\"The item to be predicted\" src={image} height={300}/> :\r\n            <EmptyImage/>\r\n          }\r\n        </div>\r\n        <div>\r\n          {\r\n            prediction && show &&\r\n            <>\r\n              <h3>Was my guess correct?</h3>\r\n              <Radio onChange={(e) => setGuessedCorrect(e.target.value)}>\r\n                <label><input type=\"radio\" value={1} name=\"correct\"/> Yes</label>\r\n                <label><input type=\"radio\" value={0} name=\"correct\"/> No</label>\r\n              </Radio>\r\n              <div style={{display: \"flex\", float: \"right\"}}>\r\n                <CloseButton onClick={closeModal}>Close</CloseButton>\r\n                <SubmitButton onClick={saveAccuracy}>Save and Close</SubmitButton>\r\n              </div>\r\n            </>\r\n          }\r\n        </div>\r\n      </Modal>\r\n    </Overlay> :\r\n    <></>;\r\n}\r\n\r\n\r\nexport default PredictionModal;"]},"metadata":{},"sourceType":"module"}