{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryanarveseth\\\\Desktop\\\\Projects\\\\senior-project\\\\ui\\\\src\\\\components\\\\ImagePredictor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport ImageButton from \"./ImageButton\";\nimport styled from \"styled-components\";\nimport PredictionModal from \"./PredictionModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mobilenet = require('@tensorflow-models/mobilenet');\n\nconst EmptyImage = styled.div`\n  background-color: lightGrey;\n  height: 320px; \n  width: 320px;\n  margin: 0 auto;\n`;\n_c = EmptyImage;\nconst ImageContainer = styled.div`\n  border-radius: 8px;\n`;\n_c2 = ImageContainer;\nconst Overlay = styled.div`\n  height: 100vh;\n  width: 100vw;\n  background: rgba(0,0,0,0.5);\n  position: fixed;\n  z-index: 2;\n  top: 0;\n  left: 0;\n`;\n_c3 = Overlay;\nconst Spinner = styled.div`\n  border-radius: 50%;\n  width: 2.5em;\n  height: 2.5em;\n  -webkit-animation-fill-mode: both;\n  animation-fill-mode: both;\n  -webkit-animation: load7 1.8s infinite ease-in-out;\n  animation: load7 1.8s infinite ease-in-out;\n  color: #20bf6b;\n  font-size: 10px;\n  margin: 80px auto;\n  position: relative;\n  text-indent: -9999em;\n  -webkit-transform: translateZ(0);\n  -ms-transform: translateZ(0);\n  transform: translateZ(0);\n  -webkit-animation-delay: -0.16s;\n  animation-delay: -0.16s;\n  \n  z-index: 3;\n\n  &:before {\n    border-radius: 50%;\n    width: 2.5em;\n    height: 2.5em;\n    -webkit-animation-fill-mode: both;\n    animation-fill-mode: both;\n    -webkit-animation: load7 1.8s infinite ease-in-out;\n    animation: load7 1.8s infinite ease-in-out;\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -3.5em;\n    -webkit-animation-delay: -0.32s;\n    animation-delay: -0.32s;\n  }\n  \n  &:after {\n    border-radius: 50%;\n    width: 2.5em;\n    height: 2.5em;\n    -webkit-animation-fill-mode: both;\n    animation-fill-mode: both;\n    -webkit-animation: load7 1.8s infinite ease-in-out;\n    animation: load7 1.8s infinite ease-in-out;\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 3.5em;\n  }\n`;\n_c4 = Spinner;\nconst Footer = styled.div`\n  position: fixed; \n  bottom: 0;\n`;\n_c5 = Footer;\n\nconst ImagePredictor = () => {\n  _s();\n\n  const [model, setModel] = useState();\n  const [img, setImg] = useState();\n  const [prediction, setPrediction] = useState();\n  const [showPrediction, setShowPrediction] = useState(false);\n  const [accuracyRating, setAccuracyRating] = useState(\"\");\n  useEffect(() => {\n    const getAccuracyRating = async () => {\n      const res = await fetch(\"api/get-accuracy\");\n      const rating = await res.json();\n      setAccuracyRating(rating.percentage);\n    };\n\n    getAccuracyRating();\n  }, []);\n\n  const readImageData = file => {\n    if (file) {\n      return new Promise((resolve, reject) => {\n        const fileReader = new FileReader();\n\n        fileReader.onload = () => resolve(fileReader.result);\n\n        fileReader.onerror = () => reject(fileReader.error);\n\n        fileReader.readAsDataURL(file);\n      });\n    } else {\n      return undefined;\n    }\n  };\n\n  const selectImage = async e => {\n    const file = e.target.files[0];\n    setImg(await readImageData(file));\n  };\n\n  useEffect(() => {\n    const getMobileNet = async () => {\n      const modelData = await mobilenet.load();\n      setModel(modelData);\n    };\n\n    if (model === undefined) {\n      getMobileNet();\n    }\n  }, [model]);\n  useEffect(() => {\n    const getPrediction = async () => {\n      if (model !== undefined && img !== undefined) {\n        const inputImage = document.createElement('img');\n        inputImage.src = img;\n\n        inputImage.onload = async () => {\n          const predictionsData = await model.classify(inputImage, 1);\n          let {\n            className,\n            probability\n          } = predictionsData && predictionsData.length > 0 && predictionsData[0];\n\n          if (className.includes(\"coyote\")) {\n            className = \"Coyote\";\n          } else if (className.includes(\"cougar\") || className.includes(\"mountain\") || className.includes(\"catamount\") || className.includes(\"puma\") || className.includes(\"panther\")) {\n            className = \"Cougar\";\n          } else if (className.includes(\"fox\")) {\n            className = \"Fox\";\n          } else if (className.includes(\"cat\")) {\n            className = \"Cat\";\n          } else if (className.includes(\"dog\")) {\n            className = \"Dog\";\n          } else {\n            className = `Unknown image. Is it a ${className.split(\",\").map(guess => guess.trim())[0]}?`;\n          }\n\n          setPrediction({\n            probability: probability,\n            className: className\n          });\n        };\n      }\n    };\n\n    if (img && model) {\n      getPrediction();\n    }\n  }, [model, img]);\n  useEffect(() => {\n    if (!prediction) {\n      setShowPrediction(false);\n    } else {\n      setTimeout(() => {\n        setShowPrediction(true);\n      }, 2000);\n    }\n  }, [prediction]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: \"white\"\n    },\n    children: [accuracyRating && /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Lifetime accuracy rating: \", accuracyRating, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 26\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"What's in the picture?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PredictionModal, {\n      image: img,\n      prediction: prediction,\n      setPrediction: setPrediction,\n      setShowPrediction: setShowPrediction,\n      show: showPrediction,\n      setAccuracyRating: setAccuracyRating\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageContainer, {\n      children: img ? /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"The item to be predicted\",\n        src: img,\n        height: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(EmptyImage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageButton, {\n      selectImage: selectImage,\n      setShowPrediction: setShowPrediction,\n      setPrediction: setPrediction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: prediction && !showPrediction && /*#__PURE__*/_jsxDEV(Overlay, {\n        children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Image recognition software built on tensorflow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ImagePredictor, \"xLhoeeMPTp7n+14xnkWPkoWAO/k=\");\n\n_c6 = ImagePredictor;\nexport default ImagePredictor;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"EmptyImage\");\n$RefreshReg$(_c2, \"ImageContainer\");\n$RefreshReg$(_c3, \"Overlay\");\n$RefreshReg$(_c4, \"Spinner\");\n$RefreshReg$(_c5, \"Footer\");\n$RefreshReg$(_c6, \"ImagePredictor\");","map":{"version":3,"sources":["C:/Users/ryanarveseth/Desktop/Projects/senior-project/ui/src/components/ImagePredictor.js"],"names":["React","useEffect","useState","ImageButton","styled","PredictionModal","mobilenet","require","EmptyImage","div","ImageContainer","Overlay","Spinner","Footer","ImagePredictor","model","setModel","img","setImg","prediction","setPrediction","showPrediction","setShowPrediction","accuracyRating","setAccuracyRating","getAccuracyRating","res","fetch","rating","json","percentage","readImageData","file","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","error","readAsDataURL","undefined","selectImage","e","target","files","getMobileNet","modelData","load","getPrediction","inputImage","document","createElement","src","predictionsData","classify","className","probability","length","includes","split","map","guess","trim","setTimeout","color"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport ImageButton from \"./ImageButton\";\r\nimport styled from \"styled-components\";\r\nimport PredictionModal from \"./PredictionModal\";\r\n\r\nconst mobilenet = require('@tensorflow-models/mobilenet');\r\n\r\n\r\nconst EmptyImage = styled.div`\r\n  background-color: lightGrey;\r\n  height: 320px; \r\n  width: 320px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst Overlay = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  background: rgba(0,0,0,0.5);\r\n  position: fixed;\r\n  z-index: 2;\r\n  top: 0;\r\n  left: 0;\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n  border-radius: 50%;\r\n  width: 2.5em;\r\n  height: 2.5em;\r\n  -webkit-animation-fill-mode: both;\r\n  animation-fill-mode: both;\r\n  -webkit-animation: load7 1.8s infinite ease-in-out;\r\n  animation: load7 1.8s infinite ease-in-out;\r\n  color: #20bf6b;\r\n  font-size: 10px;\r\n  margin: 80px auto;\r\n  position: relative;\r\n  text-indent: -9999em;\r\n  -webkit-transform: translateZ(0);\r\n  -ms-transform: translateZ(0);\r\n  transform: translateZ(0);\r\n  -webkit-animation-delay: -0.16s;\r\n  animation-delay: -0.16s;\r\n  \r\n  z-index: 3;\r\n\r\n  &:before {\r\n    border-radius: 50%;\r\n    width: 2.5em;\r\n    height: 2.5em;\r\n    -webkit-animation-fill-mode: both;\r\n    animation-fill-mode: both;\r\n    -webkit-animation: load7 1.8s infinite ease-in-out;\r\n    animation: load7 1.8s infinite ease-in-out;\r\n    content: '';\r\n    position: absolute;\r\n    top: 0;\r\n    left: -3.5em;\r\n    -webkit-animation-delay: -0.32s;\r\n    animation-delay: -0.32s;\r\n  }\r\n  \r\n  &:after {\r\n    border-radius: 50%;\r\n    width: 2.5em;\r\n    height: 2.5em;\r\n    -webkit-animation-fill-mode: both;\r\n    animation-fill-mode: both;\r\n    -webkit-animation: load7 1.8s infinite ease-in-out;\r\n    animation: load7 1.8s infinite ease-in-out;\r\n    content: '';\r\n    position: absolute;\r\n    top: 0;\r\n    left: 3.5em;\r\n  }\r\n`;\r\n\r\nconst Footer = styled.div`\r\n  position: fixed; \r\n  bottom: 0;\r\n`;\r\n\r\nconst ImagePredictor = () => {\r\n  const [model, setModel] = useState();\r\n  const [img, setImg] = useState();\r\n  const [prediction, setPrediction] = useState();\r\n  const [showPrediction, setShowPrediction] = useState(false);\r\n  const [accuracyRating, setAccuracyRating] = useState(\"\");\r\n\r\n\r\n  useEffect(() => {\r\n    const getAccuracyRating = async () => {\r\n      const res = await fetch(\"api/get-accuracy\");\r\n      const rating = await res.json();\r\n      setAccuracyRating(rating.percentage);\r\n    }\r\n\r\n    getAccuracyRating();\r\n  }, []);\r\n\r\n  const readImageData = file => {\r\n    if (file) {\r\n      return new Promise((resolve, reject) => {\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = () => resolve(fileReader.result);\r\n        fileReader.onerror = () => reject(fileReader.error);\r\n        fileReader.readAsDataURL(file);\r\n      });\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  const selectImage = async (e) => {\r\n    const file = e.target.files[0];\r\n\r\n    setImg(await readImageData(file))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getMobileNet = async () => {\r\n      const modelData = await mobilenet.load();\r\n      setModel(modelData);\r\n    }\r\n\r\n    if (model === undefined) {\r\n      getMobileNet();\r\n    }\r\n  }, [model]);\r\n\r\n  useEffect(() => {\r\n\r\n    const getPrediction = async () => {\r\n      if (model !== undefined && img !== undefined) {\r\n        const inputImage = document.createElement('img');\r\n        inputImage.src = img;\r\n\r\n        inputImage.onload = async () => {\r\n          const predictionsData = await model.classify(inputImage, 1);\r\n\r\n          let {className, probability} = predictionsData && predictionsData.length > 0 && predictionsData[0];\r\n\r\n          if (className.includes(\"coyote\")) {\r\n            className = \"Coyote\";\r\n          } else if (className.includes(\"cougar\") ||\r\n            className.includes(\"mountain\") ||\r\n            className.includes(\"catamount\") ||\r\n            className.includes(\"puma\") ||\r\n            className.includes(\"panther\")) {\r\n            className = \"Cougar\";\r\n          } else if (className.includes(\"fox\")) {\r\n            className = \"Fox\";\r\n          } else if (className.includes(\"cat\")) {\r\n            className = \"Cat\";\r\n          } else if (className.includes(\"dog\")) {\r\n            className = \"Dog\";\r\n          } else {\r\n            className = `Unknown image. Is it a ${className.split(\",\").map(guess => guess.trim())[0]}?`\r\n          }\r\n\r\n          setPrediction({probability: probability, className: className});\r\n        }\r\n      }\r\n    }\r\n\r\n    if (img && model) {\r\n      getPrediction();\r\n    }\r\n  }, [model, img]);\r\n\r\n  useEffect(() => {\r\n    if (!prediction) {\r\n      setShowPrediction(false);\r\n    } else {\r\n      setTimeout(() => {\r\n        setShowPrediction(true);\r\n      }, 2000);\r\n    }\r\n  }, [prediction]);\r\n\r\n  return (\r\n    <div style={{color: \"white\"}}>\r\n      {accuracyRating && <h1>Lifetime accuracy rating: {accuracyRating}%</h1>}\r\n      <h1>What's in the picture?</h1>\r\n      <PredictionModal image={img}\r\n                       prediction={prediction}\r\n                       setPrediction={setPrediction}\r\n                       setShowPrediction={setShowPrediction}\r\n                       show={showPrediction}\r\n                       setAccuracyRating={setAccuracyRating}/>\r\n      <ImageContainer>\r\n        {img ?\r\n          <img alt=\"The item to be predicted\" src={img} height={300}/> :\r\n          <EmptyImage/>\r\n        }\r\n      </ImageContainer>\r\n      <ImageButton selectImage={selectImage}\r\n                   setShowPrediction={setShowPrediction}\r\n                   setPrediction={setPrediction}/>\r\n      <div>\r\n        {\r\n          prediction &&\r\n          !showPrediction &&\r\n          <Overlay>\r\n            <Spinner/>\r\n          </Overlay>\r\n        }\r\n      </div>\r\n      <Footer>\r\n        <h4>Image recognition software built on tensorflow</h4>\r\n      </Footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ImagePredictor;"]},"metadata":{},"sourceType":"module"}